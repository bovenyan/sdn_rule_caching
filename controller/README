DESCRIPTION:

This demo is for bucket generation

==========================================================================================
DEPENDANCY:

TO RUN THIS CODE YOU'LL NEED:

CPP STL'11
CPP BOOST LIB (standalone)

==========================================================================================

HOWTO:

make 

./QuadTreeDemo.out [-input xx] [-output xx] [-maxsize x] [-minscope y]


==========================================================================================

COMMENTS

test.cpp is where main func resides

BucketList.txt is where the bucket recordings resides: including the bucket Pref/Mask and number of rules in the bucket.

An 10k rules set file generated by ClassBench named Filters10k is included for testing.

two customized parameters can be changes on your needs:

max_bucket_size (THRESHOLD in QuadTree.h): maximum rules in a bucket. Note that here max_bucket_size is not a strict lower bound: e.g. suppose there are 100 different rules overlapped in a certain /8 /8 bucket, there's no way you can reduce the rules in a bucket by setting max_bucket_size to 60. But If by cutting a /8 /8 bucket with 120 rules into four /9 /9 buckets with 90,80,70,55 rules, the cut operation will terminate if you set max_bucket_size to 100.

min_bucket_scope (MIN_BUCKET_SCOPE in QuadTree.h): minimum scope of the bucket. Avoid generating too small bucket. e.g. Setting min_bucket_scope to 8 will lead the cut operation to terminate when reaching /8 /8 buckets (/9 /9 buckets will not be generated). This avoids the OVERLAP bug mentioned in the previous example and limits the bucket number. Suggest setting min_bucket_scope <= 10 in case of generating too many buckets: setting min_bucket_scope to 12 will lead to at least 7GB bucketfile.

The proper parameter setting is closely related to the rule set file.

===========================================================================================

UPGRADE LOG:

2013:10:1  change vector<int> to unsigned int[] for efficiency enhancement
